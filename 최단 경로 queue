
import heapq
import sys
input1 = sys.stdin.readline
INF=int(1e9)

#노드의 개수, 간선의 개수를 입력받기
n,m =map(int,input().split())

#시작 노드 번호를 입력받기
start=int(input())

#각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph =[[] for i in range(n+1)]

#최단 거리 테이블을 모두 무한으로 초기화
distance=[INF] *(n+1)

#모든 간선 정보를 입력받기
for _ in range(m):
    a,b,c =map(int,input().split())
    # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    graph[a].append((b,c))
    
#방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def dijkstra(start):
    q=[]
    heapq.heappush(q,(0,start)) #큐로 하나씩 밀어준다.
    distance[start]=0
    while q:
        dist,now =heapq.heappop(q)
        if distance[now]<dist: #비교 다른 노드에서의 거리보다 작으면 무시
            continue
        for i in graph[now]:
            cost= dist+i[1] 
            if cost < distance[i[0]]:
                distance[i[0]]=cost
                heapq.heappush(q(cost,i[0]))
                
dijkstra(start)

for i in range(1,n+1):
    if distance[i]==INF:
        print('fin')
    else:
        print(distance[i])           

import heapq
import sys

input= sys.stdin.readline

INF=int(1e9)
#도시, 통로, 메시지보내기 위한 도시
n,m,start =map(int, input().split())

graph =[[] for i in range(n+1)]

distance=[INF] *(n+1)

for _ in range(m): #도시, 노드, 메세지
    a,b,c=map(int, input().split())
    graph[a].append((b,c))

    
#방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def dijkstra(start):
    q=[]
    heapq.heappush(q,(0,start))
    distance[start]=0
    while q:
        dist, now=heapq.heappop(q) #짧은 경로 설정
        if distance[now]<dist:
            continue
        for i in graph[now]:
            cost=dist+i[1]
            
            if cost<distance[i[0]]:
                distance[i[0]]=cost
                heapq.heappush(q,(cost,i[0]))
                
dijkstra(start)
        

count=0

max_distance=0
                  
for d in distance:
    if d!=INF:
        count+=1
        max_distance=max(max_distance,d)
        
print(count-1,max_distance)

import sys
input1 = sys.stdin.readline()
INF=int(1e9)

#노드의 개수, 간선의 개수를 입력받기
n,m =map(int,input().split())

#시작 노드 번호를 입력받기
start=int(input())

#각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph =[[] for i in range(n+1)]

#방문한 적이 있는지 체크하는 목적의 리스트를 만들기
visited=[False]*(n+1)

#최단 거리 테이블을 모두 무한으로 초기화
distance=[INF] *(n+1)

#모든 간선 정보를 입력받기
for _ in range(m):
    a,b,c =map(int,input().split())
    # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    graph[a].append((b,c))
    
#방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def get_smallest():
    min_value=INF
    index =0 #가장 최단 거리가 짧은 노드(인덱스) 
    for i in range(1,n+1):
        if distance[i]<min_value and not visited[i]:
            min_value = distance[i]
            index = i
    return index        


def dijkstra(start):
    distance[start]=0
    visited[start]=True
    for i in graph[start]:
        distance[i[0]]=i[1] #노드의 위치륿 변경해주는거
    for j in range(n-1): #위치한 노드는 뺀다
            now= get_smallest() #가장 짧은 거리로 간다.
            visited[now]= True #노드에서도 방문한거니까        
        #거리의 값을 구한다.
        #노드의 거리를 비교해서 더 작은 값을 산출한다.
            for k in graph[now]:
                cost=distance[now]+k[1]
                if cost< distance[k[0]]: #거리 값
                    distance[k[0]]=cost  
                
dijkstra(start)

for i in range(1,n+1):
    if distance[i]==INF:
        print('fin')
    else:
        print(distance[i])
